from bayes_opt import BayesianOptimization

def black_box_function(x, y):
    return -x **2 - (y - 1) ** 2 + 1

pbounds = {'x' : (2, 4), 'y' : (-3, 3)} # 가장 좋은 수를 찾는 정의 함수

optimizer = BayesianOptimization(
    f = black_box_function, # f에 모델
    pbounds=pbounds, # pbounds에 파라미터 넣으면 최적화된 값을 찾아줌??
    random_state=66
)

optimizer.maximize(init_points=2, n_iter=30)

# |   iter    |  target   |     x     |     y     |
# -------------------------------------------------
# |  1        | -14.56    |  2.309    | -2.198    |
# |  2        | -6.433    |  2.725    |  1.075    |
# |  3        | -14.75    |  3.369    | -1.097    |
# |  4        | -6.331    |  2.489    |  2.065    |
# |  5        | -19.0     |  4.0      |  3.0      |
# |  6        | -3.117    |  2.0      |  1.341    |
# |  7        | -3.634    |  2.0      |  0.2036   |
# |  8        | -7.0      |  2.0      |  3.0      |
# |  9        | -3.053    |  2.0      |  0.7695   |
# |  10       | -3.727    |  2.0      |  1.853    |
# |  11       | -3.001    |  2.0      |  1.035    |
# |  12       | -3.002    |  2.0      |  0.9516   |
# |  13       | -3.004    |  2.0      |  1.062    |
# |  14       | -3.001    |  2.0      |  0.9753   |
# |  15       | -3.0      |  2.0      |  0.9868   |
# |  16       | -3.0      |  2.0      |  1.017    | => 얘가 베스트
# |  17       | -3.001    |  2.0      |  0.9752   |
# =================================================