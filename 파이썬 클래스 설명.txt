클래스(Class)란 무엇인가

클래스는 자료형을 위한 일종의 템플릿이다. 클래스 안에는 다양한 유형의 정보가 담겨 있고, 자료형과 어떻게 상호작용할 것인지 적혀 있다. 클래스를 이용해 프로그래밍하면 데이터와 데이터를 조작하 는 함수를 하나의 묶음으로 관리할 수 있으므로 복잡한 프로그램도 더욱 쉽게 작성할 수 있다. 클래스를 사용하기 전에는 보통 어떤 데이터가 존재하고 데이터를 조작하는 함수를 통해 데이터를 목적에 맞게 변경한 후 이를 다시 출력하는 형태로 사용해왔다. 이를 절차 지향형 프로그래밍이라고 하는데 객체지향의 프로그래밍은 정의 하는 것에서 시작한다. 하나의 객체를 지정해 두면 그 객체가 여러가지 타입도 하나의 타입으로 인식하기에 하나의 묶음 정보로 바인딩되는 효과가 있다. 

클래스 정의하기

>>> class StockInfo
      pass

 함수를 정의할 때 def라는 키워드를 썼던 것처럼 파이썬에서 클래스를 정의하려면 class 라는 키워드를 사용한다. 클래스를 정의한다는 것은 새로운 데이터 타입을 정의한 것이기 때문에 이를 실제로 사용하려면 인스턴스라는 것을 생성해야 한다. 

>>> stock1 = StockInfo()
>>> stock1
<__main__.StockInfo object at 0x0302ABB0>
>>>

확인하기
>>> type(stock1)
<class '__main__.StockInfo'>
>>>

인스턴스를 만들어도 입력되는 정보가 없다면 소용없으므로 사용자로부터 정보를 입력받아 추가하는 작업을 하는 함수가 있는데 이를 메서드(mthod)라고 한다. 클래스 내부에 정의된 함수인 메서드의 첫번째 인자가 self이다.

>>> class StockInfo:
        def set_info(self, name, code, price):
                self.name = name
                self.code = code
                self.price = price

set_info 메서드의 동작은 메서드 인자 변수에 각각 바인딩 하는 것이다. 

self.변수명’과 같은 형태를 띠는 변수를 인스턴스 변수라고 함 인스턴스 변수는 클래스 인스턴스 내부의 변수를 의미 1이라는 인스턴스를 생성한 후 set_info 메서드를 호출하면 메서드의 인자로 전달된 값을 인스턴스 내부 변수인 self.name, self.code, self.price이 바인딩하는 것. 클래스를 정의하는 순간에는 생성할 인스턴스의 이름이 stock1인지 모르기 때문에 self라는 단어를 대신 사용하는 것.

정리해보면 set_info 메서드 내에서 self.name이라는 표현은 나중에 생성될 클래스 인스턴스 내의 name 변수를 의미. 인스턴스 이름에‘.’를 붙인 후 인스턴스 변수의 이름을 지정하는 식으로 특정 인스턴스 변수에 접근할 수 있다.


__init__ (self)

__init__ (self)와 같은 이름의 메서드를 생성자라고 하며, 파이썬 클래스에서__로 시작하는 함수는 모두 특별한 메서드를 의미

>>> class MyClass:
        def __init__(self):
>>> inst1 = MyClass()

>>> class StockInfo:
        def __init__(self, name, code, price):
                self.name = name
                self.code = code
                self.price = price
        def print_info(self):
                print("--------------------")
                print("Name: ", self.name)
                print("code: ", self.code)
                print("price: ", self.price)
                print("--------------------")


클래스 내에 정의된 함수를 메서드라고 부른다 그리고 메서드의 첫 번째 인자는 항상 self여야 한다


클래스 상속

다른 클래스에 이미 구현된 메서드나 속성을 상속한 클래스에서는 그러한 메서드나 속성을 그대로 사용할 수 있다.
>>> class Parent:
        def can_sing(self):
                print("Sing a song")
>>> father = Parent()
>>> father.can_sing()
Sing a song

굳이 상속이라는 기능을 사용하지 않고도 부모 클래스에 구현된 메서드를 그대로 복사해서 새로 정의할 클래스에 코드를 붙여넣는 식으로 사용할 수도 있다. 이렇게 하면 같은 기능을 하는 코드가 중복되기 때문에 코드를 관리하기가 어렵고 복사 및 붙여넣기를 해야 하므로 불편 이에 반해 클래스의 상속이라는 기능을 이용하면 최소한의 코드로도 부모 클래스에 구현된 메서드를 손쉽게 바로 이용할 수 있다.


파이썬에서 __init__()는 클래스의 생성자 역할을 하고 __del__()는 종료자 역할,
이후 클래스를 함수로써 호출 가능하게 활용하기위하여 사용하는 특수한 메소드가 바로 __call__()

 __call__ 함수를 이용하여 객체의 생성 및 종료와 관계 없이 객체의 내부 상태를 변경 할 수 있다.

class Stuff(object):

    def __init__(self, x, y, range):
        super(Stuff, self).__init__()
        self.x = x
        self.y = y
        self.range = range

    def __call__(self, x, y):
        self.x = x
        self.y = y
        print '__call__ with (%d,%d)' % (self.x, self.y)

    def __del__(self):
        del self.x
        del self.y
        del self.range

>>> s = Stuff(1, 2, 3)
>>> s.x
1
>>> s(7, 8)
__call__ with (7,8)
>>> s.x
7